{
    "autotest": {
        "net.dhcp4List": {
            "verify_igo": {
                "dhcp4Relay.assignedServer.netmask",
                "dhcp4Server.ipmacBindings.hostname",
                "dhcp4Server.dhcpServerPool.vsi",
                "dhcp4Server.dhcpServerPool.setdns",
                "dhcp4Server.dhcpServerPool.addressRange.bits",
                "dhcp4Server.dhcpServerPool.netmask",
                "dhcp4Server.dhcpServerPool.gateway",
                "dhcp4Server.dhcpServerPool.dns.dns2",
                "dhcp4Server.dhcpServerPool.dns.dns1",
                "dhcp4Server.dhcpServerPool.wins.wins1",
                "dhcp4Server.dhcpServerPool.wins.wins2",
                "dhcp4Server.dhcpServerPool.lease",
                "dhcp4Server.dhcpServerPool.addressRange.start",
                "dhcp4Server.dhcpServerPool.addressRange.end",
                "dhcp4Server.ipmacBindings.name",
                "dhcp4Server.ipmacBindings.mac",
                "dhcp4Server.ipmacBindings.ip",
                "description"
            },
            "ignore": {
                "name",
                "ifname",
                "uuid"
            }
        },
        "net.ripng.if": {
            "ignore": {
                "start"
            }
        },
        "net.dhcp6List": {
            "verify_igo": {
                "description",
                "dhcp6Server.rapidCommit",
                "dhcp6Server.serverBind.pdPoolBindList.duid",
                "dhcp6Server.serverBind.pdPoolBindList.preferredUnlimit",
                "dhcp6Server.serverBind.pdPoolBindList.ipv6Prefix",
                "dhcp6Server.serverBind.pdPoolBindList.valid",
                "dhcp6Server.serverBind.pdPoolBindList.iaid",
                "dhcp6Server.serverBind.pdPoolBindList.preferred",
                "dhcp6Server.serverBind.pdPoolBindList.validUnlimit",
                "dhcp6Server.serverBind.adPoolBindList.duid",
                "dhcp6Server.serverBind.adPoolBindList.preferredUnlimit",
                "dhcp6Server.serverBind.adPoolBindList.valid",
                "dhcp6Server.serverBind.adPoolBindList.ipv6Address",
                "dhcp6Server.serverBind.adPoolBindList.iaid",
                "dhcp6Server.serverBind.adPoolBindList.preferred",
                "dhcp6Server.serverBind.adPoolBindList.validUnlimit",
                "dhcp6Server.setdns",
                "dhcp6Server.serverPool.pdPoolList.preferredUnlimit",
                "dhcp6Server.serverPool.pdPoolList.ipv6Prefix",
                "dhcp6Server.serverPool.pdPoolList.valid",
                "dhcp6Server.serverPool.pdPoolList.preferred",
                "dhcp6Server.serverPool.pdPoolList.assignedLength",
                "dhcp6Server.serverPool.pdPoolList.validUnlimit",
                "dhcp6Server.serverPool.adPoolList.preferredUnlimit",
                "dhcp6Server.serverPool.adPoolList.ipv6Prefix",
                "dhcp6Server.serverPool.adPoolList.valid",
                "dhcp6Server.serverPool.adPoolList.preferred",
                "dhcp6Server.serverPool.adPoolList.validUnlimit",
                "dhcp6Server.preference",
                "dhcp6Server.dns.dns2",
                "dhcp6Server.dns.dns1"
            },
            "ignore": {
                "name",
                "ifname",
                "uuid"
            }
        },
        "net.interfaces": {
            "verify_igo": {
                "vsys",
                "ipv6.ipv6Param.nd.router.ra_interval_option",
                "ipv6.ipv6Param.nd.dad.time",
                "ipv6.ipv6Param.nd.nud.interval",
                "ipv6.ipv6Param.nd.nud.attempts",
                "ipv6.ipv6Param.nd.nud.retry_base",
                "ipv6.dhcp6.serverIp.start",
                "ipv6.dhcp6.serverIp.end",
                "ipv6.dhcp6.serverIp.bits",
                "ipv6.dhcp6.infoOnlyOption",
                "channelif.bypassMirror.ipGroup",
                "channelif.bypassMirror.statsEnable",
                "physicalif.bypassMirror.ipGroup",
                "physicalif.bypassMirror.statsEnable"
            },
            "ignore": {
                "uuid",
                "gretunif.createTime",
                "subif.fatherInterface",
                "oobManage",
                "mac"
            }
        },
        "net.fluxlogmirs": {
            "ignore": {
                "^.*"
            }
        },
        "net.arpProxyTable": {
            "ignore": {
                "uuid"
            }
        },
        "net.instance.interfacecfglist": {
            "verify_igo": {
                "ipv4.passiveMode"
            }
        }
    },
    "relation": {
        "net.interfaces": {
            "ospf6.if?$name=$name",
            "ospf6.nbma?$ifName=$name",
            "net.rip.if?$ifname=$name",
            "net.ripng.if?$ifname=$name",
            "net.instance.interfacecfglist?$name=$name",
            "net.arpProxyTable?$ifname=$uuid",
            "net.fluxlogmirs?$interface=$uuid"
        }
    },
    "cmds": {
        "+interface net.interfaces:$name",
        "if-mode TOLOWER(net.interfaces:$ifMode)",
        "description net.interfaces:$description",
        "SELECT(net.interfaces:$oobManage || net.interfaces:$mtu == 1500, , mtu $1)",
        "SELECT(net.interfaces:$oobManage, ,mac net.interfaces:$mac)",
        "SELECT(net.interfaces:$ifType==PHYSICALIF || net.interfaces:$ifType==CHANNELIF, SELECT(net.interfaces:$shutdown, shutdown))",
        "SELECT(net.interfaces:$ifType==PHYSICALIF || net.interfaces:$ifType==CHANNELIF, SELECT(net.interfaces:$wanEnable, wan enable))",
        "SELECT(net.interfaces:$jumbo, jumbo enable)",
        "SELECT(net.interfaces:$ipv4.ipv4Mode==PPPOE, ip address pppoe)",
        "SELECT(net.interfaces:$ipv4.ipv4Mode==PPPOE, pppoe bond GETREF(net.interfaces:$ipv4.pppoeGroupName, name))",
        "SELECT(net.interfaces:$bandSwitch.ingressbandSwitch.value && net.interfaces:$bandSwitch.ingressbandSwitch.value ~= 0, bandwidth upstream $0)",
        "SELECT(net.interfaces:$bandSwitch.ingressbandSwitch.value && net.interfaces:$bandSwitch.egressbandSwitch.value ~= 0, bandwidth downstream $0)",
        "SELECT(net.interfaces:$manage.ssh,   manage ssh   enable)",
        "SELECT(net.interfaces:$manage.snmp,  manage snmp  enable)",
        "SELECT(net.interfaces:$manage.https, manage https enable)",
        "SELECT(net.interfaces:$manage.ping,  manage ping  enable)",
        "default-gateway  net.interfaces:$defaultGateway.ipv4Gateway",
        "default-gateway6 net.interfaces:$defaultGateway.ipv6Gateway",
        "SELECT(net.interfaces:$reverseRouteEnable, reverse-route enable)",
        "reverse-route-gateway  net.interfaces:$reverseRoute.ipv4Nexthop",
        "reverse-route-gateway6 net.interfaces:$reverseRoute.ipv6Nexthop",
        "SELECT(net.interfaces:$ifMode==SWITCH, vlan access net.interfaces:$vlan.accessId)",
        "SELECT(net.interfaces:$ifMode==SWITCH, vlan native net.interfaces:$vlan.trunkConfig.nativeId)",
        "SELECT(net.interfaces:$ifMode==SWITCH, vlan trunk ARRAY(net.interfaces:$vlan.trunkConfig.trunkRange..., $start-$end, $start))",
        "SELECT(net.interfaces:$physicalif.speedDuplex.autoneg, no speed-duplex, speed-duplex net.interfaces:$physicalif.speedDuplex.speed net.interfaces:$physicalif.speedDuplex.duplex)",
        "SELECT(net.interfaces:$ifMode == BYPASSMIRROR, flow-stats ip-group GETREF(net.fluxlogmirs:$ipGroups))",
        "SELECT(net.interfaces:$ifMode == BYPASSMIRROR && net.fluxlogmirs:$enable, flow-stats enable)",
        "SELECT(net.interfaces:$ifType == CHANNELIF, aggr-mode TOLOWER(net.interfaces:$channelif.channelMode))",
        "SELECT(net.interfaces:$ifType == CHANNELIF, aggr-static mode TOLOWER(net.interfaces:$channelif.channelStatic.staticMode))",
        "SELECT(net.interfaces:$ifType == CHANNELIF, aggr-static loadbalance TOLOWER(net.interfaces:$channelif.channelStatic.loadbalance))",
        "SELECT(net.interfaces:$ifType == CHANNELIF && net.interfaces:$channelif.channelStatic.failover.preempt, aggr-static failover-preemption enable)",
        "SELECT(net.interfaces:$ifType == CHANNELIF, exit; interface GETREF(net.interfaces:$channelif.ethSelect); aggregate net.interfaces:$name; exit; interface net.interfaces:$name;)",
        "SELECT(net.interfaces:$ifType == CHANNELIF, aggr-static failover-primary GETREF(net.interfaces:$channelif.channelStatic.failover.channelPrimary, name))",
        "SELECT(net.interfaces:$ifType == CHANNELIF, aggr-lacp hash-mode TOLOWER(net.interfaces:$channelif.channelLacp.hashMode))",
        "SELECT(net.interfaces:$ifType == CHANNELIF, aggr-lacp negotiate-mode TOLOWER(net.interfaces:$channelif.channelLacp.negotiateMode))",
        "SELECT(net.interfaces:$ifType == GRETUN, gre tunnel-type TOLOWER(net.interfaces:$gretunif.type))",
        "SELECT(net.interfaces:$ifType == GRETUN, gre tunnel-sip net.interfaces:$gretunif.tunnelSrc)",
        "SELECT(net.interfaces:$ifType == GRETUN, gre tunnel-dip net.interfaces:$gretunif.tunnelDst)",
        "SELECT(net.interfaces:$gretunif.checkSumEnable, gre checksum enable)",
        "SELECT(net.interfaces:$ifType == GRETUN, gre key net.interfaces:$gretunif.greKey)",
        "SELECT(net.interfaces:$gretunif.keepalive.aliveEnable, gre keepalive enable)",
        "SELECT(net.interfaces:$ifType == GRETUN, gre keepalive interval net.interfaces:$gretunif.keepalive.interval)",
        "SELECT(net.interfaces:$ifType == GRETUN, gre keepalive attempts net.interfaces:$gretunif.keepalive.attempt)",
        "SELECT(net.interfaces:$ifType == TUNNELIF, tunnel protocol TOLOWER(net.interfaces:$tunnelif.type))",
        "SELECT(net.interfaces:$ifType == TUNNELIF, FUNC(tunnelTrans, net.interfaces:$tunnelif))",
        "SELECT(net.interfaces:$ifType == TUNNELIF, tunnel destination net.interfaces:$tunnelif.destination)",
        "ip address ARRAY(net.interfaces:$ipv4.staticIp, $ipaddress.start/$ipaddress.bits, $ipaddress.start-$ipaddress.end)",
        "SELECT(net.interfaces:$ipv4.dhcp.unicast && net.interfaces:$ipv4.dhcp.gateway == false, ip address dhcp unicast)",
        "SELECT(net.interfaces:$ipv4.dhcp.gateway && net.interfaces:$ipv4.dhcp.unicast == false, ip address dhcp setroute)",
        "SELECT(net.interfaces:$ipv4.dhcp.unicast && net.interfaces:$ipv4.dhcp.gateway, ip address dhcp unicast setroute)",
        "SELECT(net.interfaces:$ipv4.ipv4Mode == DHCP && net.interfaces:$ipv4.dhcp.unicast == false && net.interfaces:$ipv4.dhcp.gateway == false, ip address dhcp)",
        "lldp state TOLOWER(net.interfaces:$lldpConfig.state)",
        "SELECT(net.interfaces:$lldpConfig.basicTlv.managementAddress, lldp basic-tlv management-address enable)",
        "SELECT(net.interfaces:$lldpConfig.basicTlv.systemCapability,  lldp basic-tlv system-capability enable)",
        "SELECT(net.interfaces:$lldpConfig.basicTlv.systemDescription, lldp basic-tlv system-description enable)",
        "SELECT(net.interfaces:$lldpConfig.basicTlv.systemName,        lldp basic-tlv system-name enable)",
        "SELECT(net.interfaces:$lldpConfig.basicTlv.portDescription,   lldp basic-tlv port-description enable)",
        "SELECT(net.interfaces:$lldpConfig.dot1Tlv.portVlanId,         lldp 802.1-tlv port-vlan-id enable)",
        "SELECT(net.interfaces:$lldpConfig.dot3Tlv.linkAggregation,    lldp 802.3-tlv link-aggregation enable)",
        "SELECT(net.interfaces:$lldpConfig.dot3Tlv.macPhysic,          lldp 802.3-tlv mac-physic enable)",
        "SELECT(net.interfaces:$lldpConfig.dot3Tlv.maximumFrameSize,   lldp 802.3-tlv maximum-frame-size enable)",
        "ip ospf cost net.instance.interfacecfglist:$ipv4.cost",
        "ip ospf dead-interval net.instance.interfacecfglist:$ipv4.deadInterval",
        "ip ospf hello-interval net.instance.interfacecfglist:$ipv4.helloInterval",
        "SELECT(net.instance.interfacecfglist:$ipv4.mtuIgnore, ip ospf mtu-ignore)",
        "ip ospf network TOLOWER(net.instance.interfacecfglist:$ipv4.networkType)",
        "ip ospf priority net.instance.interfacecfglist:$ipv4.priority",
        "ip ospf retransmit-interval net.instance.interfacecfglist:$ipv4.retransmitInterval",
        "ip ospf transmit-delay net.instance.interfacecfglist:$ipv4.transmitDelay",
        "SELECT(net.instance.interfacecfglist:$ipv4.authMode==MD5,  ip ospf authentication message-digest)",
        "SELECT(net.instance.interfacecfglist:$ipv4.authMode==NONE, ip ospf authentication null)",
        "SELECT(net.instance.interfacecfglist:$ipv4.authMode==TEXT, ip ospf authentication)",
        "ip ospf authentication-key net.instance.interfacecfglist:$ipv4.authString",
        "ip ospf message-digest-key net.instance.interfacecfglist:$ipv4.md5String",
        "SELECT(net.instance.interfacecfglist:$ipv4.bfd, ip ospf bfd)",
        "SELECT(net.rip.if:$passiveMode, ip rip passive-mode)",
        "SELECT(net.rip.if:$bfd, ip rip bfd)",
        "ip rip send-version net.rip.if:$sendVersion",
        "ip rip receive-version net.rip.if:$receiveVersion",
        "ip rip authentication SELECT(net.rip.if:$authMode==NONE, none, TOLOWER($0) net.rip.if:$authString)",
        "ip rip authentication-key net.rip.if:$authString",
        "SELECT(net.rip.if:$splitHorizon, ip rip split-horizon)",
        "SELECT(net.rip.if:$poisonedReverse, ip rip poisoned-reverse)",
        "SELECT(net.interfaces:$ipv6.ipv6Param.enable, ipv6 enable)",
        "ipv6 address ARRAY(net.interfaces:$ipv6.staticIp, $start/$bits, $start-$end)",
        "SELECT(net.interfaces:$ipv6.ipv6Mode == DHCP6, ipv6 address dhcp6 SELECT(net.interfaces:$ipv6.dhcp6.rapidOption, rapid-commit))",
        "SELECT(net.interfaces:$ipv6.autoconfigEnable, ipv6 address autoconfig SELECT(net.interfaces:$ipv6.autoconfigDefaultRoute, default-route))",
        "SELECT(net.interfaces:$ipv6.ipv6Param.mtu ~= 1500, ipv6 mtu $0)",
        "ipv6 nd dad attempts net.interfaces:$ipv6.ipv6Param.nd.dad.attempts",
        "SELECT(net.interfaces:$ipv6.ipv6Param.nd.router.manage_flag, ipv6 nd management-flag enable)",
        "SELECT(net.interfaces:$ipv6.ipv6Param.nd.router.other_flag, ipv6 nd other-flag enable)",
        "ipv6 nd ns-interval net.interfaces:$ipv6.ipv6Param.nd.ns_interval",
        "ipv6 nd nud reachable-time net.interfaces:$ipv6.ipv6Param.nd.nud.reachable_time",
        "ipv6 nd ra router-perference TOLOWER(net.interfaces:$ipv6.ipv6Param.nd.router.prefence)",
        "ipv6 nd ra interval net.interfaces:$ipv6.ipv6Param.nd.router.ra_min_interval net.interfaces:$ipv6.ipv6Param.nd.router.ra_max_interval",
        "ipv6 nd ra lifetime net.interfaces:$ipv6.ipv6Param.nd.router.ra_lifetime",
        "ipv6 nd ra supress TOLOWER(net.interfaces:$ipv6.ipv6Param.nd.router.ra_supress)",
        "ipv6 nd ra hoplimit net.interfaces:$ipv6.ipv6Param.nd.router.hopLimit",
        "SELECT(net.interfaces:$ipv6.ipv6Param.nd.router.no_linkmtu, ipv6 nd ra no_linkmtu)",
        "ipv6 nd ra dns_domain net.interfaces:$ipv6.ipv6Param.nd.router.dns_domain.name lifetime net.interfaces:$ipv6.ipv6Param.nd.router.dns_domain.lifetime",
        "ipv6 nd ra dns_server net.interfaces:$ipv6.ipv6Param.nd.router.dns_server.ipv6Address lifetime net.interfaces:$ipv6.ipv6Param.nd.router.dns_server.lifetime",
        "ipv6 nd ra prefix ARRAY(net.interfaces:$ipv6.ipv6Param.nd.ra_prefix, {$prefix, validLifetime $validLifetime, perferredLifetime $perferredLifetime, SELECT($noAutoconfig, noAutoconfig), SELECT($offLink, offLink), SELECT($noAdvertise, noAdvertise)})",
        "ipv6 nd ra route-prefix ARRAY(net.interfaces:$ipv6.ipv6Param.nd.route_prefix, {$prefix, lifetime $lifetime, perference TOLOWER($prefence)})",
        "ipv6 ospf cost ospf6.if:$ipv6.cost",
        "ipv6 ospf dead-interval ospf6.if:$ipv6.deadInterval",
        "ipv6 ospf hello-interval ospf6.if:$ipv6.helloInterval",
        "ipv6 ospf area ospf6.if:$ipv6.areaId instance ospf6.if:$ipv6.instanceId",
        "SELECT(ospf6.if:$ipv6.mtuIgnore, ipv6 ospf mtu-ignore)",
        "ipv6 ospf network TOLOWER(ospf6.if:$ipv6.networkType)",
        "SELECT(ospf6.if:$ipv6.passiveMode, ipv6 ospf passive)",
        "ipv6 ospf priority ospf6.if:$ipv6.priority",
        "ipv6 ospf retransmit-interval ospf6.if:$ipv6.retransmitInterval",
        "ipv6 ospf transmit-delay ospf6.if:$ipv6.transmitDelay",
        "SELECT(ospf6.if:$ipv6.bfd, ipv6 ospf bfd)",
        "ipv6 ospf neighbor ospf6.nbma:$neighborId SELECT(ospf6.nbma:$pollInterval, poll-interval $0)",
        "SELECT(net.ripng.if:$passiveMode, ipv6 rip passive-mode)",
        "SELECT(net.ripng.if:$bfd, ipv6 rip bfd)",
        "SELECT(net.ripng.if:$splitHorizon==false, no ipv6 rip split-horizon)",
        "SELECT(net.ripng.if:$poisonedReverse, ipv6 rip poisoned-reverse)",
        "arp-proxy net.arpProxyTable:$startIp net.arpProxyTable:$endIp",
        "SELECT(net.interfaces:$ipmacBind && net.interfaces:$ipmacBind ~= DISABLE, ipmac-bind TOLOWER(net.interfaces:$ipmacBind))",
        "SELECT(net.interfaces:$ifMode==SWITCH && net.interfaces:$rstp.rstpState, stp enable)",
        "SELECT(net.interfaces:$ifMode==SWITCH && net.interfaces:$rstp.rstpPriority && net.interfaces:$rstp.rstpPriority ~= 128, stp priority $2)",
        "SELECT(net.interfaces:$ifMode==SWITCH && net.interfaces:$rstp.portPathCost && net.interfaces:$rstp.portPathCost ~= 0, stp cost $2)",
        "arp-proxy net.arpProxyTable:$startIp net.arpProxyTable:$endIp",
        "SELECT(net.interfaces:$ipv6.ipv6Param.nd_learning == false, no ipv6 nd-learning)",
        "SELECT(net.interfaces:$ipv6.ipv6Param.nd_inspection.trust, ipv6 nd-inspection trust)",
        "SELECT(net.interfaces:$ipv6.ipv6Param.nd_inspection.denyra, ipv6 nd-inspection deny-ra)",
        "ipv6 nd-inspection TOLOWER(net.interfaces:$ipv6.ipv6Param.nd_inspection.inspectionType)",
        "ipv6 nd-inspection rate-limit net.interfaces:$ipv6.ipv6Param.nd_inspection.rate_limit"
    },
    "cfgs": {
        "net.rip.if",
        "net.arpProxyTable",
        "net.ripng.if",
        "ospf6.nbma",
        "net.interfaces",
        "net.fluxlogmirs",
        "ospf6.if",
        "net.instance.interfacecfglist"
    },
    "module": "interface",
    "ignore": {
        "ipv6 address 2000::1/96",
        "ip address 1.1.1.1/24",
        "ip address 10.251.251.251/24"
    },
    "plugin": "tunnel.lua"
}